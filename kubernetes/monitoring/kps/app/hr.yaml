---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: ${VERSION_KUBE_PROMETHEUS_STACK}
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
  maxHistory: 3
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    # defaultRules:
    #   disabled:
    #     HostHighCpuLoad: true
    #   create: true
    #   rules:
    #     alertmanager: false
    #     etcd: false
    #     configReloaders: false
    #     general: false
    #     k8sContainerCpuUsageSecondsTotal: false
    #     k8sContainerMemoryCache: false
    #     k8sContainerMemoryRss: false
    #     k8sContainerMemorySwap: false
    #     k8sContainerResource: false
    #     k8sContainerMemoryWorkingSetBytes: false
    #     k8sPodOwner: false
    #     kubeApiserverAvailability: false
    #     kubeApiserverBurnrate: false
    #     kubeApiserverHistogram: false
    #     kubeApiserverSlos: false
    #     kubeControllerManager: false
    #     kubelet: false
    #     kubeProxy: false
    #     kubePrometheusGeneral: false
    #     kubePrometheusNodeRecording: false
    #     kubernetesApps: false
    #     kubernetesResources: false
    #     kubernetesStorage: false
    #     kubernetesSystem: false
    #     kubeSchedulerAlerting: false
    #     kubeSchedulerRecording: false
    #     kubeStateMetrics: false
    #     network: false
    #     node: false
    #     nodeExporterAlerting: false
    #     nodeExporterRecording: false
    #     prometheus: false
    #     prometheusOperator: false
    #     windows: false

    # kubernetesServiceMonitors:
    #   enabled: false
    # coreDns:
    #   enabled: false
    # nodeExporter:
    #   enabled: false


    crds:
      enabled: false
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      enabled: false

    # FIXME: alertmanager ingress
    # https://github.com/wrmilling/k3s-gitops/blob/main/monitoring/kube-prometheus-stack/kube-prometheus-stack.yaml
    # alertmanager:
    #   ingress:
    #     enabled: true
    #     pathType: Prefix
    #     ingressClassName: internal
    #     hosts: ["alertmanager.devbu.io"]
    #   alertmanagerSpec:
    #     replicas: 3
    #     useExistingSecret: true
    #     configSecret: alertmanager-secret
    #     storage:
    #       volumeClaimTemplate:
    #         spec:
    #           storageClassName: openebs-hostpath
    #           resources:
    #             requests:
    #               storage: 1Gi

    grafana:
      enabled: false
      forceDeployDashboards: true

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Drop high cardinality labels
          - action: labeldrop
            regex: (uid)
          - action: labeldrop
            regex: (id|name)
          - action: drop
            sourceLabels:
              - "__name__"
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)

    kubeStateMetrics:
      enabled: true
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - "__meta_kubernetes_pod_node_name"
              targetLabel: kubernetes_node

    kubeApiServer:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Drop high cardinality labels
          - action: drop
            sourceLabels:
              - "__name__"
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
          - action: drop
            sourceLabels:
              - "__name__"
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)

    kubeControllerManager:
      enabled: true
      endpoints:  &eps
        - ${CLUSTER_CONTROLLER_IP}
        - ${NODE_IP}
      service:
        enabled: true
        port: 10257
        targetPort: 10257
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true

    kubeScheduler:
      enabled: true
      endpoints: *eps
      service:
        enabled: true
        port: 10259
        targetPort: 10259
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true

    kubeProxy:
      enabled: false
      endpoints: *eps

    kubeEtcd:
      enabled: true
      endpoints: *eps

    prometheusOperator:
      createCustomResource: true
      # prometheusConfigReloaderImage:
      #   repository: quay.io/coreos/prometheus-config-reloader
      #   tag: v0.39.0
      # configmapReloadImage:
      #   repository: jimmidyson/configmap-reload
      #   tag: v0.4.0
      prometheusConfigReloader:
        resources:
          limits:
            cpu: 200m
      admissionWebhooks:
        enabled: false
        certManager:
          enabled: true
    prometheus:
      ingress:
        # type: LoadBalancer
        # annotations:
        # io.cilium/lb-ipam-ips: ${PROMETHEUS_IP}
        annotations:
          external-dns.alpha.kubernetes.io/hostname: "internal.${SECRET_DOMAIN}"
        enabled: true
        ingressClassName: internal
        pathType: Prefix
        hosts:
          - &host "prometheus.${SECRET_DOMAIN}"

      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: __replica__
        scrapeInterval: 1m # Must match interval in Grafana Helm chart
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        enableAdminAPI: true
        walCompression: true
        enableFeatures:
          - auto-gomemlimit
          - memory-snapshot-on-shutdown
          - new-service-discovery-manager
        retention: 14d
        retentionSize: 150GB
        externalLabels:
          cluster: storage
        resources:
          requests:
            cpu: 100m
          limits:
            memory: 8Gi
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 160Gi

        podMonitorSelector:
          matchLabels:
            app.kubernetes.io/part-of: kube-prometheus-stack
        serviceMonitorSelector:
          matchLabels:
            app.kubernetes.io/part-of: kube-prometheus-stack
        # without thanos
        # enableRemoteWriteReceiver: true
        # TODO check
        # podAntiAffinity: hard

      # Thanos
      # https://thanos.io/ - Open source, highly available Prometheus setup with long term storage capabilities.
      # thanosService:
      #   enabled: true
      # thanosServiceMonitor:
      #   enabled: false
      #if need to use thanos for prometheus HA
      podMetadata:
        annotations:
          secret.reloader.stakater.com/reload: &secret thanos-objstore-config
      thanos:
        image: quay.io/thanos/thanos:${THANOS_VERSION}
        version: "${THANOS_VERSION#v}"
        objectStorageConfig:
          existingSecret:
            name: *secret
            key: config
      # if thanos as external service
      thanosService:
        enabled: true
      thanosServiceExternal:
        enabled: true
        type: LoadBalancer
        annotations:
          external-dns.alpha.kubernetes.io/hostname: thanos-lb.${SECRET_DOMAIN}
          io.cilium/lb-ipam-ips: ${PROMETHEUS_IP}
        externalTrafficPolicy: Cluster
      thanosServiceMonitor:
        enabled: true

    nodeExporter:
      enabled: true

    prometheus-node-exporter:
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
      # TODO: node labels
      # tolerations:
      # - key: "arm"
      #   operator: "Exists"
      # - key: "armhf"
      #   operator: "Exists"
      # - key: "node-role.kubernetes.io/master"
      #   operator: "Exists"
