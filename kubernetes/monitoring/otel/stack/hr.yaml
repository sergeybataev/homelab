---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/all.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: otel-stack
  namespace: monitoring
spec:

  interval: 15m

  chart:
    spec:
      chart: opentelemetry-kube-stack
      version: 0.6.1
      sourceRef:
        kind: HelmRepository
        name: opentelemetry-charts
        namespace: flux-system

  install:
    remediation:
      retries: 3

  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
    force: true

  uninstall:
    keepHistory: false

  values:
    clusterName: ${CLUSTER_NAME}
    # clusterName: homelab

    opentelemetry-operator:
      enabled: true

    collectors:
      daemon:
        suffix: daemon
        mode: daemonset
        enabled: true
        scrape_configs_file: ""
        config:
          exporters:
            debug:
              verbosity: detailed
            # prometheusremotewrite:
            #   endpoint: http://thanos-receive.monitor.svc.cluster.local:10902/api/v1/write
          receivers:
            prometheus:
              config:
                scrape_configs:
                - job_name: kubernetes-pods
                  kubernetes_sd_configs:
                  - role: pod
                    selectors:
                    - field: spec.nodeName=$OTEL_K8S_NODE_NAME
                      role: pod
                  relabel_configs:
                  - action: keep
                    regex: true
                    source_labels:
                    - __meta_kubernetes_pod_annotation_prometheus_io_scrape
                  - action: drop
                    regex: true
                    source_labels:
                    - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
                  - action: replace
                    regex: (https?)
                    source_labels:
                    - __meta_kubernetes_pod_annotation_prometheus_io_scheme
                    target_label: __scheme__
                  - action: replace
                    regex: (.+)
                    source_labels:
                    - __meta_kubernetes_pod_annotation_prometheus_io_path
                    target_label: __metrics_path__
                  - action: replace
                    regex: ([^:]+)(?::\d+)?;(\d+)
                    replacement: $$1:$$2
                    source_labels:
                    - __address__
                    - __meta_kubernetes_pod_annotation_prometheus_io_port
                    target_label: __address__
                  - action: labelmap
                    regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
                    replacement: __param_$$1
                  - action: labelmap
                    regex: __meta_kubernetes_pod_label_(.+)
                  - action: replace
                    source_labels:
                    - __meta_kubernetes_namespace
                    target_label: namespace
                  - action: replace
                    source_labels:
                    - __meta_kubernetes_pod_name
                    target_label: pod
                  - action: drop
                    regex: Pending|Succeeded|Failed|Completed
                    source_labels:
                    - __meta_kubernetes_pod_phase
                  - action: replace
                    source_labels:
                    - __meta_kubernetes_pod_label_app_kubernetes_io_name
                    target_label: job
                  scrape_interval: 30s
                - job_name: node-exporter
                  relabel_configs:
                  - action: labelmap
                    regex: __meta_kubernetes_node_label_(.+)
                  - action: replace
                    regex: (.*)
                    replacement: $$1
                    separator: ;
                    source_labels:
                    - job
                    target_label: __tmp_prometheus_job_name
                  scrape_interval: 30s
                  static_configs:
                  - targets:
                    - ${OTEL_K8S_NODE_IP}:9100
                - authorization:
                    credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                    type: Bearer
                  follow_redirects: true
                  honor_labels: true
                  honor_timestamps: true
                  job_name: kubelet
                  kubernetes_sd_configs:
                  - follow_redirects: true
                    role: node
                    selectors:
                    - field: metadata.name=$OTEL_K8S_NODE_NAME
                      role: node
                  metric_relabel_configs:
                  - action: drop
                    regex: container_cpu_(load_average_10s|system_seconds_total|user_seconds_total)
                    replacement: $$1
                    separator: ;
                    source_labels:
                    - __name__
                  - action: drop
                    regex: container_fs_(io_current|reads_merged_total|sector_reads_total|sector_writes_total|writes_merged_total)
                    replacement: $$1
                    separator: ;
                    source_labels:
                    - __name__
                  - action: drop
                    regex: container_memory_(mapped_file|swap)
                    replacement: $$1
                    separator: ;
                    source_labels:
                    - __name__
                  - action: drop
                    regex: container_(file_descriptors|tasks_state|threads_max)
                    replacement: $$1
                    separator: ;
                    source_labels:
                    - __name__
                  - action: drop
                    regex: container_spec.*
                    replacement: $$1
                    separator: ;
                    source_labels:
                    - __name__
                  - action: drop
                    regex: .+;
                    replacement: $$1
                    separator: ;
                    source_labels:
                    - id
                    - pod
                  metrics_path: /metrics/cadvisor
                  relabel_configs:
                  - action: replace
                    regex: (.*)
                    replacement: $$1
                    separator: ;
                    source_labels:
                    - job
                    target_label: __tmp_prometheus_job_name
                  - action: replace
                    replacement: kubelet
                    target_label: job
                  - action: replace
                    regex: (.*)
                    replacement: $${1}
                    separator: ;
                    source_labels:
                    - __meta_kubernetes_node_name
                    target_label: node
                  - action: replace
                    regex: (.*)
                    replacement: https-metrics
                    separator: ;
                    target_label: endpoint
                  - action: replace
                    regex: (.*)
                    replacement: $$1
                    separator: ;
                    source_labels:
                    - __metrics_path__
                    target_label: metrics_path
                  - action: hashmod
                    modulus: 1
                    regex: (.*)
                    replacement: $$1
                    separator: ;
                    source_labels:
                    - __address__
                    target_label: __tmp_hash
                  - action: keep
                    regex: $(SHARD)
                    replacement: $$1
                    separator: ;
                    source_labels:
                    - __tmp_hash
                  scheme: https
                  scrape_interval: 15s
                  scrape_timeout: 10s
                  tls_config:
                    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                    insecure_skip_verify: true

          service:
            pipelines:
              metrics:
                receivers:
                - prometheus
                exporters:
                  - debug
                  # - prometheusremotewrite
              traces:
                exporters: [debug]
              logs:
                exporters: [debug]
      cluster:
        suffix: cluster-stats
        mode: deployment
        config:
          exporters:
            debug: {}
          service:
            pipelines:
              metrics:
                exporters: [debug]
  # Target allocator configuration
  # targetAllocator: {}
  # replicas: 1
  # nodeSelector:
  #   nodeType: worker
  # resources:
  #   requests:
  #     memory: "64Mi"
  #     cpu: "250m"
  #   limits:
  #     memory: "128Mi"
  #     cpu: "500m"
  # allocationStrategy: consistent-hashing
  # filterStrategy: relabel-config
  # serviceAccount: my-service-account
  # image: myregistry/myimage:latest
  # enabled: true
  # affinity:
  #   nodeAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #       nodeSelectorTerms:
  #         - matchExpressions:
  #             - key: kubernetes.io/e2e-az-name
  #               operator: In
  #               values:
  #                 - e2e-az1
  #                 - e2e-az2
  # # Configuration for Prometheus Custom Resources
  # prometheusCR:
  #   enabled: true
  #   scrapeInterval: 30s
  #   podMonitorSelector:
  #     key1: value1
  #     key2: value2
  #   serviceMonitorSelector:
  #     key1: value1
  #     key2: value2
  # securityContext:
  #   runAsUser: 1000
  #   capabilities:
  #     drop:
  #       - ALL
  # podSecurityContext:
  #   runAsUser: 1000
  # # Topology spread constraints for the target allocator
  # topologySpreadConstraints:
  #   - maxSkew: 1
  #     topologyKey: kubernetes.io/hostname
  #     whenUnsatisfiable: DoNotSchedule
  # # Tolerations for the collector
  # tolerations:
  #   - key: "key"
  #     operator: "Equal"
  #     value: "value"
  #     effect: "NoSchedule"
  # # Environment variables for the target allocator
  # env:
  #   - name: ENV_VAR1
  #     value: value1
  #   - name: ENV_VAR2
  #     value: value2
  # # Observability configuration for the target allocator
  # observability:
  #   metrics:
  #     enableMetrics: true
