apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: main
  namespace: monitoring
spec:
  mode: daemonset
  serviceAccount: opentelemetry-collector
  config:
    extensions:
      health_check: {}
      memory_ballast:
        size_in_percentage: 40

    receivers:
        otlp:
          protocols:
            grpc:
              endpoint: 0.0.0.0:4317
            http:
              endpoint: 0.0.0.0:4318

        filelog:
          exclude: []
          include:
          - /var/log/pods/*/*/*.log
          include_file_name: false
          include_file_path: true
          operators:
          - id: container-parser
            max_log_size: 102400
            type: container
          retry_on_failure:
            enabled: true
          start_at: end

        hostmetrics:
          collection_interval: 10s
          root_path: /hostfs
          scrapers:
            cpu:
              metrics:
                system.cpu.utilization:
                  enabled: true
            disk: {}
            filesystem:
              exclude_fs_types:
                fs_types:
                - autofs
                - binfmt_misc
                - bpf
                - cgroup2
                - configfs
                - debugfs
                - devpts
                - devtmpfs
                - fusectl
                - hugetlbfs
                - iso9660
                - mqueue
                - nsfs
                - overlay
                - proc
                - procfs
                - pstore
                - rpc_pipefs
                - securityfs
                - selinuxfs
                - squashfs
                - sysfs
                - tracefs
                match_type: strict
              exclude_mount_points:
                match_type: regexp
                mount_points:
                - /dev/*
                - /proc/*
                - /sys/*
                - /run/k3s/containerd/*
                - /var/lib/docker/*
                - /var/lib/kubelet/*
                - /snap/*
              metrics:
                system.filesystem.utilization:
                  enabled: true
            load: {}
            memory:
              metrics:
                system.memory.utilization:
                  enabled: true
            network: {}

        kubeletstats:
          auth_type: serviceAccount
          collection_interval: 15s
          endpoint: https://${env:OTEL_K8S_NODE_IP}:10250
          extra_metadata_labels:
          - container.id
          - k8s.volume.type
          insecure_skip_verify: true
          k8s_api_config:
            auth_type: serviceAccount
          metric_groups:
          - node
          - pod
          - volume
          - container
          metrics:
            container.cpu.usage:
              enabled: true
            k8s.node.cpu.usage:
              enabled: true
            k8s.node.uptime:
              enabled: true
            k8s.pod.cpu.usage:
              enabled: true
            k8s.pod.uptime:
              enabled: true

    processors:
      batch:
        send_batch_max_size: 1500
        send_batch_size: 1000
        timeout: 1s
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      k8sattributes:
        extract:
          labels:
          - from: pod
            key: app.kubernetes.io/name
            tag_name: service.name
          - from: pod
            key: k8s-app
            tag_name: service.name
          - from: pod
            key: app.kubernetes.io/instance
            tag_name: k8s.app.instance
          - from: pod
            key: app.kubernetes.io/version
            tag_name: service.version
          - from: pod
            key: app.kubernetes.io/component
            tag_name: k8s.app.component
          metadata:
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.node.name
          - k8s.pod.start_time
          - k8s.deployment.name
          - k8s.replicaset.name
          - k8s.replicaset.uid
          - k8s.daemonset.name
          - k8s.daemonset.uid
          - k8s.job.name
          - k8s.job.uid
          - k8s.container.name
          - k8s.cronjob.name
          - k8s.statefulset.name
          - k8s.statefulset.uid
          - container.image.tag
          - container.image.name
          - k8s.cluster.uid
        filter:
          node_from_env_var: K8S_NODE_NAME
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: resource_attribute
            name: k8s.pod.name
          - from: resource_attribute
            name: k8s.namespace.name
          - from: resource_attribute
            name: k8s.node.name
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.name
          - from: resource_attribute
            name: k8s.namespace.name
        - sources:
          - from: connection
      resourcedetection/env:
        detectors:
        - env
        override: false
        timeout: 2s

    exporters:
      debug: {}
      otlphttp:
        endpoint: http://loki-headless.monitoring.svc.cluster.local:3100/otlp

    service:
      pipelines:
        traces:
          receivers:
          - otlp
          processors:
          - k8sattributes
          - resourcedetection/env
          - memory_limiter
          - batch
          exporters:
          - debug

        metrics:
          receivers:
          - otlp
          - hostmetrics
          - kubeletstats
          processors:
          - k8sattributes
          - resourcedetection/env
          - memory_limiter
          - batch
          exporters:
          - debug

        logs:
          receivers:
          - filelog
          - otlp
          processors:
          - k8sattributes
          - resourcedetection/env
          - memory_limiter
          - batch
          exporters:
          - otlphttp

      # telemetry:
      #   metrics:
      #     address: $(OTEL_K8S_POD_IP):8888

  env:
    - name: OTEL_K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: OTEL_K8S_NODE_IP
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
    - name: OTEL_K8S_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    - name: OTEL_K8S_POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: OTEL_K8S_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: "k8s.cluster.name=homelab"

  volumeMounts:
    - name: varlogpods
      mountPath: /var/log/pods
      readOnly: true
    - name: varlibdockercontainers
      mountPath: /var/lib/docker/containers
      readOnly: true
    - name: hostfs
      mountPath: /hostfs
      readOnly: true
      mountPropagation: HostToContainer

  volumes:
    - name: varlogpods
      hostPath:
        path: /var/log/pods
    - name: varlibdockercontainers
      hostPath:
        path: /var/lib/docker/containers
    - name: hostfs
      hostPath:
        path: /
