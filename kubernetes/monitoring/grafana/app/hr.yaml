---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/all.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app ${APP}
  namespace: monitoring
spec:
  interval: 30m
  chart:
    spec:
      # renovate: registryUrl=https://grafana.github.io/helm-charts
      chart: grafana
      version: 8.10.1
      sourceRef:
        kind: HelmRepository
        name: grafana-charts
        namespace: flux-system
  values:
    persistence:
      enabled: true
      type: pvc
      finalizers:
        - kubernetes.io/pvc-protection
      existingClaim: ${VOLSYNC_CLAIM}

    plugins:
      - grafana-clock-panel
      - grafana-worldmap-panel
      - natel-discrete-panel
      - pr0ps-trackmap-panel
      - vonage-status-panel
      - isovalent-hubble-datasource

    env:
      GF_EXPLORE_ENABLED: true
      GF_DISABLE_SANITIZE_HTML: true
      GF_PANELS_DISABLE_SANITIZE_HTML: true
      GF_LOG_FILTERS: rendering:debug
      GF_DATE_FORMATS_USE_BROWSER_LOCALE: true
      TZ: ${TIMEZONE}
      GF_FEATURE_TOGGLES_ENABLE: publicDashboards
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: natel-discrete-panel,pr0ps-trackmap-panel,panodata-map-panel
      GF_SECURITY_COOKIE_SAMESITE: grafana
      GF_SERVER_ROOT_URL: https://grafana.${SECRET_DOMAIN}

    envFromSecrets:
      - name: grafana-secret

    extraSecretMounts:
      - name: cnpg
        mountPath: /etc/secrets/db
        secretName: main16-secret
        defaultMode: 0444
        readOnly: true
      - name: cnpg-grafana-secret
        mountPath: /etc/secrets/db_grafana
        secretName: grafana-secret
        defaultMode: 0444
        readOnly: true


    podAnnotations:
      # configmap.reloader.stakater.com/reload: grafana-config-dashboards,grafana-dashboards-default,*app
      secret.reloader.stakater.com/reload: cloudnative-pg-secret,main16-secret,grafana-secret

    serviceMonitor:
      enabled: true

    sidecar:
      datasources:
        enabled: true
        searchNamespace: ALL
      dashboards:
        enabled: true
        searchNamespace: ALL
        label: grafana_dashboard
        folderAnnotation: grafana_folder
        # folder: /var/lib/grafana/dashboards
        provider:
          disableDelete: true
          foldersFromFilesStructure: true

    extraInitContainers:
    - name: init-db
      image: ghcr.io/onedr0p/postgres-init:16
      env:
        - name: INIT_POSTGRES_DBNAME
          value: *app
        - name: INIT_POSTGRES_USER
          value: *app
        - name: INIT_POSTGRES_PASS
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: GRAFANA_PASS
        - name: INIT_POSTGRES_HOST
          valueFrom:
            secretKeyRef:
              name: main16-secret
              key: host
        - name: INIT_POSTGRES_SUPER_PASS
          valueFrom:
            secretKeyRef:
              name: cloudnative-pg-secret
              key: password

    grafana.ini:
      auth.basic:
        disable_login_form: true
      auth.anonymous:
        enabled: true
      # TODO google auth
      # auth.github:
      #   enabled: true
      #   allow_sign_up: true
      #   scopes: user:email,read:org
      #   auth_url: https://github.com/login/oauth/authorize
      #   token_url: https://github.com/login/oauth/access_token
      #   api_url: https://api.github.com/user
      #   allowed_organizations: raspbernetes
      #   client_id: '${GRAFANA_AUTH_GITHUB_CLIENT_ID}'
      #   client_secret: '${GRAFANA_AUTH_GITHUB_CLIENT_SECRET}'
      analytics:
        check_for_updates: false
        check_for_plugin_updates: true
        reporting_enabled: false
      log:
        mode: console
      grafana_net:
        url: https://grafana.net
      news:
        news_feed_enabled: false
      users:
        auto_assign_org_role: Admin
        viewers_can_edit: true
      database:
        type: postgres
        host: $__file{/etc/secrets/db/host}:$__file{/etc/secrets/db/port}
        name: *app
        user: *app
        password: $__file{/etc/secrets/db_grafana/GRAFANA_PASS}
      server:
        root_url: https://grafana.${SECRET_DOMAIN}

    datasources:
      datasources.yaml:
        apiVersion: 1
        deleteDatasources:
          - { name: Alertmanager, orgId: 1 }
          - { name: Loki, orgId: 1 }
          - { name: Prometheus, orgId: 1 }
          - { name: Prometheus-Thanos, orgId: 1 }
        datasources:
          - name: Prometheus
            type: prometheus
            access: proxy
            url: http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090
            isDefault: true
          - name: Prometheus-Thanos
            type: prometheus
            uid: prometheus
            access: proxy
            url: http://thanos-query-frontend.monitoring.svc.cluster.local.:10902
            # isDefault: true
          - name: Loki
            type: loki
            access: proxy
            url: http://loki-gateway.monitoring.svc.cluster.local
            version: 1
            jsonData:
              maxLines: 250

    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: "default"
            orgId: 1
            folder: ""
            type: file
            disableDeletion: false
            allowUiUpdates: true
            options:
              path: /var/lib/grafana/dashboards/default
          - name: ceph
            orgId: 1
            folder: Ceph
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/ceph-folder
          - name: databases
            orgId: 1
            folder: Databases
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/databases
          - name: emqx
            orgId: 1
            folder: EMQX
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/emqx-folder
          - name: flux
            orgId: 1
            folder: Flux
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/flux-folder
          - name: kubernetes
            orgId: 1
            folder: Kubernetes
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/kubernetes-folder
          - name: nginx
            orgId: 1
            folder: Nginx
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/nginx-folder
          - name: prometheus
            orgId: 1
            folder: Prometheus
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/prometheus-folder
          - name: thanos
            orgId: 1
            folder: Thanos
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/thanos-folder
          - name: unifi
            orgId: 1
            folder: Unifi
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/unifi-folder
          - name: apm
            disableDeletion: false
            editable: true
            folder: "Application Performance"
            options:
              path: /var/lib/grafana/dashboards/apm
            orgId: 1
            type: file
    dashboards:
      default:
        cert-manager:
          url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/cert-manager/dashboards/cert-manager.json
          datasource: Prometheus
        cloudflared:
          # renovate: depName="Cloudflare Tunnels (cloudflared)"
          gnetId: 17457
          revision: 6
          datasource:
            - { name: DS_PROMETHEUS, value: Prometheus }
        external-dns:
          # renovate: depName="External-dns"
          gnetId: 15038
          revision: 3
          datasource: Prometheus
        node-exporter-full:
          # renovate: depName="Node Exporter Full"
          gnetId: 1860
          revision: 36
          datasource: Prometheus
        smartctl-exporter:
          # renovate: depName="Dashboard for smartctl_exporter"
          gnetId: 20204
          revision: 1
          datasource:
            - { name: DS_PROMETHEUS, value: Prometheus }
        speedtest-exporter:
          # renovate: depName="Speedtest-Exporter Dashboard"
          gnetId: 13665
          revision: 4
          datasource:
            - { name: DS_PROMETHEUS, value: Prometheus }
        zfs:
          # renovate: depName="ZFS"
          gnetId: 7845
          revision: 4
          datasource: Prometheus
      databases:
        external-secrets:
          url: https://raw.githubusercontent.com/external-secrets/external-secrets/main/docs/snippets/dashboard.json
          datasource: Prometheus
      flux:
        flux-cluster:
          url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/cluster.json
          datasource: Prometheus
        flux-control-plane:
          url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/control-plane.json
          datasource: Prometheus
        flux-logs:
          url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/logs.json
          datasource: Prometheus
      kubernetes:
        kubernetes-api-server:
          # renovate: depName="Kubernetes / System / API Server"
          gnetId: 15761
          revision: 19
          datasource: Prometheus
        kubernetes-coredns:
          # renovate: depName="Kubernetes / System / CoreDNS"
          gnetId: 15762
          revision: 18
          datasource: Prometheus
        kubernetes-global:
          # renovate: depName="Kubernetes / Views / Global"
          gnetId: 15757
          revision: 37
          datasource: Prometheus
        kubernetes-namespaces:
          # renovate: depName="Kubernetes / Views / Namespaces"
          gnetId: 15758
          revision: 34
          datasource: Prometheus
        kubernetes-nodes:
          # renovate: depName="Kubernetes / Views / Nodes"
          gnetId: 15759
          revision: 29
          datasource: Prometheus
        kubernetes-pods:
          # renovate: depName="Kubernetes / Views / Pods"
          gNetId: 15760
          revision: 21
          datasource: Prometheus
        kubernetes-volumes:
          # renovate: depName="K8s / Storage / Volumes / Cluster"
          gnetId: 11454
          revision: 14
          datasource: Prometheus
      prometheus:
        prometheus:
          # renovate: depName="Prometheus"
          gnetId: 19105
          revision: 3
          datasource: Prometheus
      unifi:
        unifi-insights:
          # Ref: https://grafana.com/grafana/dashboards/11315
          # renovate: depName="UniFi-Poller: Client Insights - Prometheus"
          gnetId: 11315
          revision: 9
          datasource: Prometheus
        unifi-network-sites:
          # Ref: https://grafana.com/grafana/dashboards/11311
          # renovate: depName="UniFi-Poller: Network Sites - Prometheus"
          gnetId: 11311
          revision: 5
          datasource: Prometheus
        unifi-uap:
          # Ref: https://grafana.com/grafana/dashboards/11314
          # renovate: depName="UniFi-Poller: UAP Insights - Prometheus"
          gnetId: 11314
          revision: 10
          datasource: Prometheus
        unifi-usw:
          # Ref: https://grafana.com/grafana/dashboards/11315
          # renovate: depName="UniFi-Poller: USW Insights - Prometheus"
          gnetId: 11312
          revision: 9
          datasource: Prometheus
      ceph:
        ceph-cluster:
          # Ref: https://grafana.com/grafana/dashboards/2842/
          # renovate: depName="Ceph Cluster"
          gnetId: 2842
          revision: 18
          datasource: Prometheus
        ceph-osd:
          # Ref: https://grafana.com/grafana/dashboards/5336/
          # renovate: depName="Ceph - OSD (Single)"
          gnetId: 5336
          revision: 9
          datasource: Prometheus
        ceph-pools:
          # Ref: https://grafana.com/grafana/dashboards/5342/
          # renovate: depName="Ceph - Pools"
          gnetId: 5342
          revision: 9
          datasource: Prometheus
      emqx:
        emqx-authentication:
          url: https://raw.githubusercontent.com/emqx/emqx-exporter/main/grafana-dashboard/template/emqx-5/authentication.json
          datasource: Prometheus
        emqx-authorization:
          url: https://raw.githubusercontent.com/emqx/emqx-exporter/main/grafana-dashboard/template/emqx-5/authorization.json
          datasource: Prometheus
        emqx-client-events:
          url: https://raw.githubusercontent.com/emqx/emqx-exporter/main/grafana-dashboard/template/emqx-5/client-events.json
          datasource: Prometheus
        emqx-messages:
          url: https://raw.githubusercontent.com/emqx/emqx-exporter/main/grafana-dashboard/template/emqx-5/messages.json
          datasource: Prometheus
        emqx-overview:
          url: https://raw.githubusercontent.com/emqx/emqx-exporter/main/grafana-dashboard/template/emqx-5/overview.json
          datasource: Prometheus
        emqx-rule-engine-count:
          url: https://raw.githubusercontent.com/emqx/emqx-exporter/main/grafana-dashboard/template/emqx-5/rule-engine-count.json
          datasource: Prometheus
        emqx-rule-engine-rate:
          url: https://raw.githubusercontent.com/emqx/emqx-exporter/main/grafana-dashboard/template/emqx-5/rule-engine-rate.json
          datasource: Prometheus
      thanos:
        thanos-bucket-replicate:
          url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/thanos/dashboards/bucket-replicate.json
          datasource: Prometheus-Thanos
        thanos-compact:
          url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/thanos/dashboards/compact.json
          datasource: Prometheus-Thanos
        thanos-overview:
          url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/thanos/dashboards/overview.json
          datasource: Prometheus-Thanos
        thanos-query:
          url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/thanos/dashboards/query.json
          datasource: Prometheus-Thanos
        thanos-query-frontend:
          url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/thanos/dashboards/query-frontend.json
          datasource: Prometheus-Thanos
        thanos-receieve:
          url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/thanos/dashboards/receive.json
          datasource: Prometheus-Thanos
        thanos-rule:
          url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/thanos/dashboards/rule.json
          datasource: Prometheus-Thanos
        thanos-sidecar:
          url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/thanos/dashboards/sidecar.json
          datasource: Prometheus-Thanos
        thanos-store:
          url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/thanos/dashboards/store.json
          datasource: Prometheus-Thanos
      apm:
        # Ref: https://grafana.com/grafana/dashboards/19419-opentelemetry-apm/
        apm:
          gnetId: 19419
          revision: 3
    ## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
    ## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
    ## ref: http://kubernetes.io/docs/user-guide/services/
    ##
    service:
      enabled: true
      type: ClusterIP
      ports:
        web:
          protocol: TCP
          port: 80
          primary: true
          targetPort: 3000
        # targetPort: 4181 To be used with a proxy extraContainer
      ## Service annotations. Can be templated.

    ingress:
      enabled: true
      ingressClassName: external
      annotations:
        external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"
      hosts:
        - "grafana.${SECRET_DOMAIN}"

    initChownData:
      enabled: true
